cmake_policy(SET CMP0017 NEW)
cmake_minimum_required(VERSION 3.1)


set(APP_NAME __UPDATE_CMAKE_GAME_NAME__)
project (${APP_NAME})

set(COCOS2D_ROOT ${CMAKE_SOURCE_DIR}/cocos2d)

################################################################################
## CMake Modules                                                              ##
################################################################################
## Cocos2d
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${COCOS2D_ROOT}/cmake/Modules/")
include(CocosBuildHelpers)
## AmazingCow


################################################################################
## libcocos2d                                                                 ##
################################################################################
set(BUILD_CPP_EMPTY_TEST OFF CACHE BOOL "turn off build cpp-empty-test")
set(BUILD_CPP_TESTS      OFF CACHE BOOL "turn off build cpp-tests")
set(BUILD_LUA_LIBS       OFF CACHE BOOL "turn off build lua related targets")
set(BUILD_JS_LIBS        OFF CACHE BOOL "turn off build js related targets")
add_subdirectory(${COCOS2D_ROOT})


################################################################################
## Macro Definitions                                                          ##
################################################################################
if(LINUX)
    ADD_DEFINITIONS(-DLINUX)

    ## AMAZINGCOW GAME DEFINITIONS ##
    __UPDATE_CMAKE_ADD_DEFINITIONS_LINUX__

    set(PLATFORM_FOLDER linux)

elseif(ANDROID)
    ADD_DEFINITIONS (-DUSE_FILE32API)

    ## AMAZINGCOW GAME DEFINITIONS ##
    __UPDATE_CMAKE_ADD_DEFINITIONS_ANDROID__

    set(PLATFORM_FOLDER android)
else()
    message( FATAL_ERROR "Unsupported platform, CMake will exit" )
endif()


################################################################################
## Compiler options                                                           ##
################################################################################
## DEBUG
set(CMAKE_C_FLAGS_DEBUG   "-g -Wall -DCOCOS2D_DEBUG=1")
set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})

## RELEASE
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -std=c99")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wno-deprecated-declarations -Wno-reorder")
if(CLANG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
endif()


################################################################################
## Platform Sources                                                           ##
################################################################################
set(PLATFORM_SPECIFIC_SRC)
set(PLATFORM_SPECIFIC_HEADERS)

if(LINUX)
    set(PLATFORM_SPECIFIC_SRC
      proj.linux/main.cpp
    )
elseif(ANDROID)
    set(PLATFORM_SPECIFIC_SRC
      proj.android-studio/app/jni/hellocpp/main.cpp
    )
endif()


################################################################################
## Includes                                                                   ##
################################################################################
include_directories(
    ## GL
    /usr/local/include/GLFW
    /usr/include/GLFW

    ## Cocos
    ${COCOS2D_ROOT}/cocos
    ${COCOS2D_ROOT}/cocos/platform
    ${COCOS2D_ROOT}/cocos/audio/include/

    ## Game
    __UPDATE_CMAKE_INCLUDE_DIRECTORIES__
)

################################################################################
## Game Sources                                                               ##
################################################################################
set(GAME_SRC
    ## Cocos
    ${PLATFORM_SPECIFIC_SRC}

    ## Game
    __UPDATE_CMAKE_GAME_SOURCES__
)

set(GAME_HEADERS
    ## Cocos
    ${PLATFORM_SPECIFIC_HEADERS}
)



if( ANDROID )
    add_library(${APP_NAME} SHARED ${GAME_SRC} ${GAME_HEADERS})
    IF(CMAKE_BUILD_TYPE MATCHES RELEASE)
        ADD_CUSTOM_COMMAND(TARGET ${APP_NAME} POST_BUILD COMMAND ${CMAKE_STRIP} lib${APP_NAME}.so)
    ENDIF()
else()
    add_executable(${APP_NAME} ${GAME_SRC} ${GAME_HEADERS})
endif()

target_link_libraries(${APP_NAME} cocos2d)

set(APP_BIN_DIR "${CMAKE_BINARY_DIR}/bin")

set_target_properties(${APP_NAME} PROPERTIES
     RUNTIME_OUTPUT_DIRECTORY  "${APP_BIN_DIR}")


################################################################################
## Copy Resources                                                             ##
################################################################################
if(LINUX)
    pre_build(${APP_NAME}
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${APP_BIN_DIR}/Resources
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/Resources ${APP_BIN_DIR}/Resources
    )
endif()
